#+title: Sicp
#+STARTUP: shrink

* [[~/Documents/books/sicp.pdf]]

* Glossary
| Word      | Definition                                                                                |
|-----------+-------------------------------------------------------------------------------------------|
| process   | Abstract being that inhabits the computer and manipulates other abstract things like data |
| program   | Set of rules that directs a process                                                       |
| procedure | Lisp's description of a process                                                           |
| REPL      | Read-Eval-Print Loop                                                                      |

* Structure and Interpretation of Computer Programs, 2nd ed.
** 1. Building Abstractions with Procedures
Lisp treats procedures (processes) as data. This makes it suitable for writing programs whose inputs are other programs/processes/procedures like compilers and interpreters.
*** 1.1 The elements of programming
Programming language mechanics:
- Primitive expressions (data, procedures)
- Means of combination (nesting of procedures)
- Means of abstraction (naming values)

Elements of programming:
- procedures
- data
**** 1.1.1 Expressions
- Number
- +
- *

Combination (in prefix notation)
(operator [operands])
(* 10 20)
(- 2 1)
**** 1.1.2 Naming and the Environment
Environment is the memory in which the interpreter keeps all the named objects (data, procedures).
Environment stores variables that point to values (numerals, operators).
**** 1.1.3 Evaluating Combinations
`(define x 3)` is an exemption (*special form* or sometimes *syntactic sugar*).
It does not evaluate two variables (value of x and value of 3), but assigns 3 as the value of x.
Each special form has its own evaluation rule - this is the *syntax* of the programming language.
Lisp has a simple syntax: general evaluation rule + a small number of special forms.
**** 1.1.4 Compound procedures
(define <name> <params> <body>)
name - environment symbol associated with the procedure definition
params - names used within body
body - expression that will yield the value of the procedure once arguments are applied

#+begin_src scheme
(define (square x) (* x x))
(define (sum-of-squares a b)
  (+ (square a) (square b)))
(sum-of-squares 2 3)
#+end_src

#+RESULTS:
: 13

**** 1.1.5 The Substitution Model for Procedure Application
